Group {
 name quickEdit
 help http://richardfrazer.com/tools-tutorials/frameblendmerge/
 knobChanged "\n\nif nuke.thisKnob().name() == 'inputChange': updateInputs( )\n\nif (nuke.thisKnob().name() in \['use_handles', 'handles', 'startatframe']): updateTimecodes( )\n\n\ndef frames_to_timecode(frames):\n    framerate = nuke.root().fps()\n    h = frames / (3600*framerate)\n    m = frames / (60*framerate) % 60\n    s = frames / framerate % 60\n    f = frames % framerate\n    return ( \"%02d\" % (h,)  + \":\" +  \"%02d\" % (m,) + \":\" +  \"%02d\" % (s,) + \":\" +  \"%02d\" % (f,))\n\ndef updateInputs():\n\n    t = nuke.thisNode()\n\n    nuke.thisNode().begin()\n\n\n    maxinputs = 0 \n\n    inputlist = \[]\n\n    xend = 0\n\n\n    for x in range(0, t.maximumInputs()):\n        if t.input(x) is not None:\n            print \"Input \" + str(x) + \" is \" + str(t.input(x).name())\n            inputlist.insert( maxinputs, x)\n            xend = x\n            maxinputs = maxinputs + 1\n        else:\n            print \"Input \" + str(x) + \" is None\"\n\n    print inputlist\n\n    xend = xend + 1\n\n    for d in nuke.allNodes():\n        if d.name() not in \[\"MergeFrames\",\"FinalRetime\", \"Output\", \"FinalFrameRange\", \"MergeSwitch\"]:\n            nuke.delete(d)  \n\n\n    fj = 0\n\n    p = -1000\n\n\n\n    if (len(inputlist)):\n\n\n        for j in range(0, xend):\n\n\n            #j = inputlist\[i]\n\n            iname = 'Input' +str(j)\n            #print \"creating input \" + iname + \" \" + str(j)\n\n            #newInput = nuke.createNode('Input')\n            newInput = nuke.nodes.Input()\n            newInput\['name'].setValue( iname )\n            newInput.setXYpos( p, 450 )  \n            newInput\['label'].setValue( \"\[value number]\" )\n            newInput\['number'].setValue( j )\n\n            #print \"checking for \" + str(j) + \" in \" + str(inputlist)\n\n            if j in inputlist:\n                         \n                rname = 'Reformat' +str(j)\n                #newReformat = nuke.createNode('Reformat')\n                newReformat = nuke.nodes.Reformat()\n                newReformat\['name'].setValue( rname )\n                newReformat.setXYpos( p, 550 )  \n                newReformat.setInput(0, nuke.toNode( iname ))\n                newReformat\['resize'].setExpression( 'parent.reformattype' )\n                newReformat\['black_outside'].setValue( True )\n                #print \"Reformat type: \" + str(t\['reformattype'].value())\n\n                oname = 'TimeOffset' +str(j)\n                o = nuke.nodes.TimeOffset() \n                o\['name'].setValue( oname )\n                o.setXYpos( p, 650 )\n                o.setInput(0, nuke.toNode( rname ))\n\n            p = p + 100\n    \n\n        fj=j+1\n    \n\n        mergeSwitch = nuke.toNode('MergeSwitch' )\n        for j in range(mergeSwitch.inputs()): mergeSwitch.setInput(j, None) \n    \n        for j in range(0, xend):\n            if j in inputlist:\n                #print \"found \" + str(j)\n                rname = 'TimeOffset' +str(j)\n                print(\"connecting input \" + str(j) + \" to node \" + rname)\n                mergeSwitch.setInput(j, nuke.toNode( rname ))\n\n                \n\n    iname = 'Input' +str(fj)\n    newInput = nuke.nodes.Input()\n    newInput\['name'].setValue( iname )\n    newInput.setXYpos( p, 450 )  \n    newInput\['label'].setValue( \"\[value number]\" )\n    newInput\['number'].setValue( fj )\n\n    #print \"bosh!\"\n\n\n    updateTimecodes()\n        \n    t.end()\n\n\ndef updateTimecodes():\n\n    t = nuke.thisNode()\n    usehandles = t\['use_handles'].value()\n    t\['handles'].setEnabled(usehandles)\n    handles = t\['handles'].value()    \n\n    startatframe = t\['startatframe'].value()\n\n    io = t\['inout']\n    io.setAnimated(1)\n    for curve in io.animations():\n        curve.clear()\n    io.setEnabled(True)\n    \n    maxinputs = 0 \n\n    inputlist = \[]\n\n    xend = 0\n\n\n    for x in range(0, t.maximumInputs()):\n        if t.input(x) is not None:\n            inputlist.insert( maxinputs, x)\n            xend = x\n            maxinputs = maxinputs + 1\n\n    xend = xend + 1\n\n\n    edl01 = \"\"\n    edl02 = \"\"\n    edl03 = \"\"\n    edl04 = \"\"\n\n    if (len(inputlist)):\n\n\n        firstframe = startatframe\n        lastout = firstframe \n\n        totalframes = 0\n\n        for j in range(0, xend):\n\n            if j in inputlist:\n                \n                i = t.input(j)\n                tf = t.upstreamFrameRange(j)\n                tff = tf.first()\n                tfl = tf.last()\n                if(usehandles):\n                    tff = tff + handles\n                    tfl = tfl - handles\n                f = (tfl - tff)+1\n                jname = i.name()\n            \n                if(f < 1):\n\n                    print (\"Input '\" + jname + \"' is too short (\" + str(f) +\" frames)\")\n\n                    f = 0\n                    fin = int(lastout)\n                    fout = int(lastout+(f-1))\n                    \n                    edl01 = edl01 + str(j) + \") \" + i.name() + \"\\n\"\n                    edl02 = edl02 + \"  \[\" + str(fin) + \"-\" + str(fout) + \"]\\n\"\n                    edl03 = edl03 + \"  (\" + str(int(f)) + \" frames)\\n\"\n                    edl04 = edl04 + \"  \" + frames_to_timecode(int(f)) + \"\\n\"\n                    \n                else:\n\n                    o = nuke.toNode( 'TimeOffset' +str(j) ) \n                    ooffset = lastout - tff\n                    #print \"Setting \"+str(oname)+\" to (\" + str(ooffset) +\")\"\n                    o\['time_offset'].setValue( ooffset )\n\n\n                    fin = int(lastout)\n                    fout = int(lastout+(f-1))\n\n                    io.animation(0).setKey(fin,j)\n                    io.animation(0).setKey(fout,j)\n\n                    edl01 = edl01 + str(j) + \") \" + i.name() + \"\\n\"\n                    edl02 = edl02 + \"  \[\" + str(fin) + \"-\" + str(fout) + \"]\\n\"\n                    edl03 = edl03 + \"  (\" + str(int(f)) + \" frames)\\n\"\n                    edl04 = edl04 + \"  \" + frames_to_timecode(int(f)) + \"\\n\"\n\n                    totalframes = totalframes + f\n    \n                    lastout = lastout + f\n\n    \n        edl01 = edl01 + \"\\nTotal\"\n        edl02 = edl02 + \"\\n  \[\" + str(int(firstframe)) + \"-\" + str(fout) + \"]\"\n        edl03 = edl03 + \"\\n  (\" + str(int(totalframes)) + \" frames)\"\n        edl04 = edl04 + \"\\n  \" + frames_to_timecode(int(totalframes)) + \"\"\n\n\n        finalRetime = nuke.toNode('FinalRetime' )\n        finalRetime\['input.first'].setValue( firstframe )\n        finalRetime\['input.last'].setValue( firstframe + (totalframes -1 ) )   \n\n        finalFrameRange = nuke.toNode('FinalFrameRange' )\n        finalFrameRange\['first_frame'].setValue( firstframe )\n        finalFrameRange\['last_frame'].setValue( firstframe + (totalframes -1 ) )  \n\n\n\n    t\['edl01'].setValue(edl01)\n    t\['edl02'].setValue(edl02)\n    t\['edl03'].setValue(edl03)\n    t\['edl04'].setValue(edl04)\n\n    t.end()\n    "
 selected true
 xpos 723
 ypos -350
 addUserKnob {20 User}
 addUserKnob {26 "" +STARTLINE}
 addUserKnob {3 startatframe l "Start frame"}
 startatframe 1001
 addUserKnob {26 ""}
 addUserKnob {3 handles l Handles}
 handles 16
 addUserKnob {6 use_handles l "Trim handles" -STARTLINE}
 use_handles true
 addUserKnob {26 _1 l "" +STARTLINE +INVISIBLE}
 addUserKnob {6 keyin l in -STARTLINE +INVISIBLE}
 keyin true
 addUserKnob {6 keyout l out -STARTLINE +INVISIBLE}
 addUserKnob {26 ""}
 addUserKnob {4 reformattype l "Resize type" M {none width height fit fill distort "" "" "" ""}}
 reformattype width
 addUserKnob {26 ""}
 addUserKnob {26 edl01 l " " T ""}
 addUserKnob {26 edl02 l "" -STARTLINE T ""}
 addUserKnob {26 edl03 l "" -STARTLINE T ""}
 addUserKnob {26 edl04 l "" -STARTLINE T ""}
 addUserKnob {26 ""}
 addUserKnob {3 inout l Input}
 inout {{curve}}
 addUserKnob {26 inout_txt l "" +STARTLINE T "This knob shows which input is currently active - do NOT manually edit it\n"}
 addUserKnob {26 ""}
 addUserKnob {26 textabout l "" +STARTLINE T "<b>QuickEdit v1.2</b> by Richard Frazer<br>\nPlug in clips to quickly create a linear edit<br>\n<a href=\"http:www.//richardfrazer.com/tools-tutorials/fadeloop-and-quickedit/\">www.richardfrazer.com/tools-tutorials/fadeloop-and-quickedit/</a>"}
}
 Switch {
  inputs 0
  which {{parent.inout}}
  name MergeSwitch
  selected true
  xpos -900
  ypos 715
 }
 Retime {
  input.first 1001
  input.first_lock true
  input.last 1031
  input.last_lock true
  output.first 1001
  output.last 1258
  before black
  after black
  time ""
  name FinalRetime
  xpos -900
  ypos 754
 }
 FrameRange {
  first_frame 1001
  last_frame 1031
  time ""
  name FinalFrameRange
  xpos -900
  ypos 791
 }
 Output {
  name Output
  xpos -900
  ypos 836
 }
 Input {
  inputs 0
  name Input0
  label "\[value number]"
  xpos -1000
  ypos 450
 }
end_group
